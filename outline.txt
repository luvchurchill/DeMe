--------------------------
Nakamoto

Transactions include:
sign hash of block with private key of sender
sign hash of block with pub key of reciever
reciever can verify signature to send to next
----

network:
new transactions broadcast to all nodes
each node collects transactions into a block
each node trys to find pow
when one finds it broadcasts to all
nodes accept if valid
nodes express acceptance by using the block as prev_hash for next block

seems like much more than dev version hash signing etc.
 

-----------------------------
Class Blockchain

INIT
dev - initialize the chain (an empty list)
dev - and pending transactions (empty list)
dev - self.nodes set() so nodes only get added once

as - inits much more and seperates Block class and Blockchain class
as - Block init
as - (self, index, transactions/content, timestamp, prev_hash, nonce)
as - Blockchain init
as - list pending-transactions, list chain, call method create-genesis_block 
gfg - just blockchain class
gfg - init chain (empty list)
gfg - calls create_block method, (for genesis) with proof=1 prev_hash=0

-----
method create_genesis_block (as only)
instantiate block class w 0 empty etc.

-----

method new_block
dev - (self, nonce/proof, previous_hash=None)
dev - will also init genisis block
dev -  create a json like block with 
dev - index timestamp content proof/nonce prev_hash
dev - empty the pending transactions list
dev - append the block to the chain
gfg - (self, proof/nonce, prev_hash)
gfg - same as dev append
-----

method new_transaction
dev - (self, sender, recipeint, amount(content))
dev - append the args to pending transaction using dictionary
dev - (sort of like JSON) 
dev - add one to index

-----


method hash
dev - hash(block)
dev - if using json must "dump" to get the content by itself
dev - should return hash of all the dumped json
as - in block class; same func as dev
----


method last_block
both have it w property decorater (have to figure it out, I think i can leave it as a method it's just uglier)
dev - find the last block
dev - chain[-1]
as - same
gfg - in fact without decorators
-----
method registering nodes
dev - (self, address)
dev - parse the url
dev - add to self.nodes (with parsed.netloc ??)
-----

method proof of work

dev - (self, last_proof/nonce)
dev - hash has to end with {difficulty} zeros
dev - hash the prev proof/nonce with the current (constantly incrementing) proof/nonce
dev - might be drop  quicker than hashing whole block
dev - uses two functions for readability
as - (self, block) in blockchain
as - hashes the whole block using block.hash
as - same general idea
---------------------------------
Consensus (inside class)

method valid chain
dev - (self, chain)
dev - loop through whole chain from last to first checking hashes w prev_hash
dev - and proof with valid proof method (inside pow method)
as - implemnts this for single blocks, as a method, before appending
gfg - like dev
-------
method resolve conflicts
dev - replace chain with the longest one on the network
dev - get a list of neighboring nodes
dev - request chain from neighbors
dev - check for 200 status code
dev - if there's a longer chain replace ours (self.chain) with the longer one

-------------------------------------------------------------

API/Flask

app = etc.

dev - generate a unique addr for this node

dev - instantiate the blockchain
-----

make a mine route
dev - do the proof-o-w
dev - jsonify a new transaction from noone to mining node
dev - giving them token etc.
dev - create a block w this transaction as content
dev - send response notifying tht block mined
----

new transactions route POST
dev - get the json, request.get_json()
dev - check that required fields are in it
dev - add to pending-transactions using method
dev - respond with 10/4
-----

chain route

dev - func full chain
dev - return json with the chain and it's length

-----

/nodes/register route POST
dev - just get list of nodes then method register
dev - respond with message

-----
/nodes/resolve route
dev - use resolve conflicts method
dev - respond

-----
valid route gfg only
gfg - use to check if your own chain is valid?!
gfg - seems pointless








DON'T FORGET:
call the main function
app()














